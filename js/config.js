// Configuration constants and variables
console.log('üìÅ Loading config.js...');
const API_BASE = 'https://api.crea-vigne.fr/api';

// Bot state variables
let botRunning = false;
let currentBalance = 0; // Pour le balance tracker
let volumeScanInterval = null;
let tradingLoopInterval = null;
let statsInterval = null;
let pnlUpdateInterval = null;
let stopLossManagementInterval = null;
let positionSyncInterval = null;
let botStartTime = null;

// Data storage - ancien syst√®me TOP 30 supprim√©
// let top30Pairs = [];
// let currentScanIndex = 0;
let openPositions = [];
let recentAnalysis = new Map();
let pairCooldown = new Map();
let botStats = {
    totalSignals: 0,
    totalPositions: 0,
    totalClosedPositions: 0,
    winningPositions: 0,
    losingPositions: 0,
    totalWinAmount: 0,
    totalLossAmount: 0
};

// üö´ EXCLUSION: Actions tokenis√©es (stocks) disponibles sur Bitget
// Ces instruments causent des probl√®mes et doivent √™tre exclus du trading automatique
// Liste compl√®te fournie par l'utilisateur
const EXCLUDED_STOCK_TOKENS = [
    // Actions tech & cryptos
    'LINKUSDT', 'LINK',
    'NVDAXUSDT', 'NVDAX',
    'NVDAUSDT', 'NVDAon',
    'AAPLXUSDT', 'AAPLX', 'AAPLon',
    'GOOGLXUSDT', 'GOOGLX', 'GOOGLon',
    'TSLAUSDT', 'TSLAon',
    'METAXUSDT', 'METAX', 'METAon',
    'MSFTUSDT', 'MSFTon',
    'PLTRXUSDT', 'PLTRX',
    'AMDUSDT', 'AMDon',
    'OPENXUSDT', 'OPENX',
    'INTCUSDT', 'INTCon',
    'CSCOUSDT', 'CSCOon',
    'IBMUSDT', 'IBMon',
    
    // Finance & banques
    'COINXUSDT', 'COINX',
    'HOODXUSDT', 'HOODX',
    'JPMUSDT', 'JPMon',
    
    // ETFs & indices
    'SPYXUSDT', 'SPYX',
    'QQQXUSDT', 'QQQX',
    'TQQQXUSDT', 'TQQQX',
    'ITOTUSDT', 'ITOTon',
    'IWNUSDT', 'IWNon',
    'DFDVUSDT', 'DFDVx',
    'GLDXUSDT', 'GLDX',
    
    // Autres actions
    'CRCLXUSDT', 'CRCLX',
    'LMTUSDT', 'LMTon',
    'LLYUSDT', 'LLYon',
    'KOUSDT', 'KOon',
    'PFEUSDT', 'PFEon',
    'PGUSDT', 'PGon',
    'NVOUSDT', 'NVOon',
    'PEPUSDT', 'PEPon',
    'TMUSDT', 'TMon',
    'WMTUSDT', 'WMTon',
    'CVXUSDT', 'CVXon'
];

// Configuration object
let config = {
    apiKey: '',
    secretKey: '',
    passphrase: '',
    capitalPercent: 5,
    leverage: 2,
    trailingStop: 1.0,
    cooldownMinutes: 30,
    targetPnL: 2.0,                 // üÜï NOUVEAU: Objectif PnL configurable (2% par d√©faut)
    maxBotPositions: 2,             // üÜï NOUVEAU: Limite configurable des positions bot (2-5)
    maxPositionTimeHours: 24,       // üÜï NOUVEAU: Temps maximum d'ouverture d'une position en heures (3-48h, d√©faut: 24h)
    excludedSymbols: EXCLUDED_STOCK_TOKENS, // üö´ NOUVEAU: Symboles √† exclure (actions tokenis√©es)
    // üéØ NOUVEAUX PARAM√àTRES: Affichage des positions
    displaySettings: {
        maxPositionsDisplayed: 50,      // Nombre maximum de positions affich√©es (d√©faut: 50)
        compactDisplayThreshold: 10,    // Seuil pour passer en affichage compact (d√©faut: 10)
        autoRefreshInterval: 1000,      // Intervalle de mise √† jour de l'affichage (ms)
        showHiddenPositionsCount: true  // Afficher le nombre de positions masqu√©es
    },
    // NEW: MACD Strategy settings (macdTimeframe supprim√© - remplac√© par filtrage progressif 4H‚Üí1H‚Üí15M)
    topVolumeCount: 30,             // Nombre de cryptos √† analyser (TOP x)
    // Advanced trailing stop settings
    trailingStopSettings: {
        initialStopPercent: 1.0,        // Stop loss initial (-1%)
        trailingPercent: 1.0,           // Distance de trailing (1% sous le plus haut)
        updateFrequencySeconds: 30,     // Fr√©quence de mise √† jour (30s)
        minProfitToTrail: 0.5,         // Profit minimum avant activation trailing (0.5%)
        aggressiveTrailing: false,     // Mode agressif (0.5% au lieu de 1%)
        breakEvenProtection: true      // Protection break-even apr√®s +2%
    },
    fees: {
        maker: 0.0002, // 0.02%
        taker: 0.0005  // 0.05%
    }
};

// Balance information
let balance = { USDT: 0, totalEquity: 0 };

// NEW: Function to check if pair is in cooldown
function isPairInCooldown(symbol) {
    const lastPositionTime = pairCooldown.get(symbol);
    if (!lastPositionTime) return false;
    
    const cooldownMs = config.cooldownMinutes * 60 * 1000;
    const timeElapsed = Date.now() - lastPositionTime;
    
    return timeElapsed < cooldownMs;
}

// NEW: Function to add pair to cooldown
function addPairToCooldown(symbol) {
    pairCooldown.set(symbol, Date.now());
    log(`‚è∞ ${symbol} ajout√© au cooldown (${config.cooldownMinutes} minutes)`, 'INFO');
}

// NEW: Function to check remaining cooldown time
function getRemainingCooldown(symbol) {
    const lastPositionTime = pairCooldown.get(symbol);
    if (!lastPositionTime) return 0;
    
    const cooldownMs = config.cooldownMinutes * 60 * 1000;
    const timeElapsed = Date.now() - lastPositionTime;
    const remaining = Math.max(0, cooldownMs - timeElapsed);
    
    return Math.ceil(remaining / (60 * 1000)); // Return minutes
} 